
#include "gtest/gtest.h"

#include <iterator>

#include "HugeCore.h"
#include "Huge.h"

using namespace std;

TEST(Huge, LogicalNOT)
{
    EXPECT_TRUE(false);
}

TEST(Huge, Modulus)
{
    EXPECT_TRUE(false);
}

TEST(Huge, ModulusAssignment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, BitwiseAND)
{
    EXPECT_TRUE(false);
}

TEST(Huge, BitwiseANDassignment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, LogicalAND)
{
    EXPECT_TRUE(false);
}

TEST(Huge, UnaryPlus)
{
    EXPECT_TRUE(false);
}

TEST(Huge, UnaryNegation)
{
    EXPECT_TRUE(false);
}

TEST(Huge, Decrement)
{
    EXPECT_TRUE(false);
}

TEST(Huge, LogicalOR)
{
    EXPECT_TRUE(false);
}

TEST(Huge, BitwiseORassignment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, BitwiseOR)
{
    EXPECT_TRUE(false);
}

TEST(Huge, ExclusiveOR)
{
    EXPECT_TRUE(false);
}

TEST(Huge, ExclusiveORassignment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, OneComplement)
{
    EXPECT_TRUE(false);
}

TEST(Huge, Addition)
{
    EXPECT_TRUE(false);
}

TEST(Huge, AdditionAssigment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, Increment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, Subtraction)
{
    EXPECT_TRUE(false);
}

TEST(Huge, SubtractionAssigment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, Multiplication)
{
    EXPECT_TRUE(false);
}

TEST(Huge, MultiplicationAssignment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, Division)
{
    EXPECT_TRUE(false);
}

TEST(Huge, DivisionAssignment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, LeftShift)
{
    EXPECT_TRUE(false);
}

TEST(Huge, LeftShiftAssigment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, RightShift)
{
    EXPECT_TRUE(false);
}

TEST(Huge, RightShiftAssignment)
{
    EXPECT_TRUE(false);
}

TEST(Huge, Less)
{
    {
        Huge<byte> a = { 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a < b);
    }

    {
        Huge<byte> a = { 0x38, 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a < b);
    }

    {
        Huge<byte> a = { 0x21, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a < b);
    }

    {
        Huge<byte> a = { 0x00, 0x00 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a < b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_FALSE(a < b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x05, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_TRUE(a < b);
    }

}

TEST(Huge, LessEqual)
{
    {
        Huge<byte> a = { 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a <= b);
    }

    {
        Huge<byte> a = { 0x38, 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a <= b);
    }

    {
        Huge<byte> a = { 0x21, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a <= b);
    }

    {
        Huge<byte> a = { 0x00, 0x00 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a <= b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_TRUE(a <= b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x05, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_TRUE(a <= b);
    }

}

TEST(Huge, Greather)
{
    {
        Huge<byte> a = { 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a > b);
    }

    {
        Huge<byte> a = { 0x38, 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a > b);
    }

    {
        Huge<byte> a = { 0x21, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a > b);
    }

    {
        Huge<byte> a = { 0x00, 0x00 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a > b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_FALSE(a > b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x05, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_FALSE(a > b);
    }
}

TEST(Huge, GreatherEqual)
{
    {
        Huge<byte> a = { 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a >= b);
    }

    {
        Huge<byte> a = { 0x38, 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a >= b);
    }

    {
        Huge<byte> a = { 0x21, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a >= b);
    }

    {
        Huge<byte> a = { 0x00, 0x00 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a >= b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_TRUE(a >= b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x05, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_FALSE(a >= b);
    }

}

TEST(Huge, Equal)
{
    {
        Huge<byte> a = { 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a == b);
    }

    {
        Huge<byte> a = { 0x38, 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a == b);
    }

    {
        Huge<byte> a = { 0x21, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a == b);
    }

    {
        Huge<byte> a = { 0x00, 0x00 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a == b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_TRUE(a == b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x05, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_FALSE(a == b);
    }
}

TEST(Huge, Inequality)
{
    {
        Huge<byte> a = { 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_FALSE(a != b);
    }

    {
        Huge<byte> a = { 0x38, 0x22, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a != b);
    }

    {
        Huge<byte> a = { 0x21, 0x12 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a != b);
    }

    {
        Huge<byte> a = { 0x00, 0x00 };
        Huge<byte> b = { 0x22, 0x12 };

        EXPECT_TRUE(a != b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_FALSE(a != b);
    }

    {
        Huge<byte> a = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };
        Huge<byte> b = { 0x01, 0x02, 0x03, 0x05, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c };

        EXPECT_TRUE(a != b);
    }

}
